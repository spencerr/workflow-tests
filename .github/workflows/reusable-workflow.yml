on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
      solution-directory:
        required: true
        type: string
      service-project:
        required: true
        type: string
      unit-tests:
        required: true
        type: string
      integration-tests:
        required: true
        type: string
      dotnet-version:
        required: true
        type: string
jobs:
 # Generate a matrix with a directories which have changed files
  code-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Display Configuration
        run: |
          echo "${{ toJSON(inputs) }}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        if: inputs.dotnet-version != ''
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore Solution
        working-directory: ${{ inputs.solution-directory }}
        run: |
          dotnet restore

      - name: Build - Service Projects
        working-directory: ${{ inputs.solution-directory }}
        if: inputs.service-project != ''
        run: |
          dotnet build ${{ inputs.service-project }} -c 'Release' -p 'any'

      - name: Build - Solution
        working-directory: ${{ inputs.solution-directory }}
        run: |
          dotnet restore
          dotnet build -c 'Release' -p 'any'

      - name: Test - Unit Tests
        id: dotnet-unit-test
        continue-on-error: true
        working-directory: ${{ inputs.solution-directory }}
        run: |
          dotnet test --filter '${{ inputs.unit-tests }}' \
            -c 'Release' --no-build \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutput='./coverage/' \
            /p:Exclude="[*.*IntegrationTest*]*" \
            --logger "trx;LogFileName=unit-tests.trx" \
            --results-directory ./coverage

      - name: Code Coverage - Create Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: success() || failure()
        with:
          filename: coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Test - Integration Tests
        id: dotnet-integration-test
        continue-on-error: true
        working-directory: ${{ inputs.solution-directory }}
        run: |
          dotnet test --filter '${{ inputs.integration-tests }}' \
            -c 'Release' --no-build

      - name: Code Coverage - Create Cobertura Report
        if: success() || failure()
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:coverage/**/coverage.cobertura.xml \
            -targetdir:${{github.workspace}}/code-coverage \
            -reporttypes:'MarkdownSummaryGithub,Html'

      - name: Code Coverage - Add PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' && (success() || failure())
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Code Coverage - Add TRX Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Coverage
          path: coverage/unit-test.trx
          reporter: dotnet-trx

      - name: Summary - Write Basic Code Coverage
        if: success() || failure()
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Summary - Write Cobertura Report
        if: success() || failure()
        run: cat code-coverage/SummaryGithub.md >> $GITHUB_STEP_SUMMARY   